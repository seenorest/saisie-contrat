{"version":3,"file":"taskpane.js","mappings":"iVAqBeA,I,gFAAf,6GACQC,MAAMC,IAAN,4CAAU,WAAOC,GAAP,+FAERC,EAAmBD,EAAQE,SAASC,WAAWC,sBAC/CC,EAAgBJ,EAAiBK,OAAOC,IAAI,SAAS,IAC7CC,KAAO,gBAGrBH,EAAcI,oBAAoBC,OAAS,CAAC,CAAC,OAAQ,WAAY,WAAY,WAE7EL,EAAcM,KAAKJ,IAAI,KAAyB,CAC9C,CAAC,WAAY,oBAAqB,iBAAkB,OACpD,CAAC,WAAY,0BAA2B,iBAAkB,UAC1D,CAAC,WAAY,gCAAiC,YAAa,QAC3D,CAAC,YAAa,gBAAiB,aAAc,MAC7C,CAAC,YAAa,kBAAmB,YAAa,SAC9C,CAAC,YAAa,gBAAiB,QAAS,OACxC,CAAC,YAAa,gCAAiC,YAAa,WAI9DF,EAAcO,QAAQC,UAAU,GAAGC,WAAWC,aAAe,CAAC,CAAC,cAC/DV,EAAcS,WAAWE,OAAOC,iBAChCZ,EAAcS,WAAWE,OAAOE,cAtBlB,UAwBRlB,EAAQmB,OAxBA,4CAAV,uDAyBHC,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,gBAAgBC,OACnCH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eA7BxD,2C,wBAdAC,OAAOC,SAAQ,SAACC,GAETF,OAAO7B,QAAQgC,aAAaC,eAAe,WAAY,QAC1DX,QAAQC,IAAI,mGAIdW,SAASC,eAAe,gBAAgBC,QAAUvC,EAC9CkC,EAAKM,OAASR,OAAOS,SAASxC,QAChCoC,SAASC,eAAe,gBAAgBI,MAAMC,QAAU,OACxDN,SAASC,eAAe,YAAYI,MAAMC,QAAU,W","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\nOffice.onReady((info) => {\n  // Determine if the user's version of Office supports all the Office.js APIs that are used in the tutorial.\n  if (!Office.context.requirements.isSetSupported(\"ExcelApi\", \"1.7\")) {\n    console.log(\"Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office.\");\n  }\n\n  // Assign event handlers and other initialization logic.\n  document.getElementById(\"create-table\").onclick = createTable;\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n  }\n});\n\nasync function createTable() {\n  await Excel.run(async (context) => {\n    // TODO1: Queue table creation logic here.\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    const expensesTable = currentWorksheet.tables.add(\"A1:D1\", true /*hasHeaders*/);\n    expensesTable.name = \"ExpensesTable\";\n\n    // TODO2: Queue commands to populate the table with data.\n    expensesTable.getHeaderRowRange().values = [[\"Date\", \"Merchant\", \"Category\", \"Amount\"]];\n\n    expensesTable.rows.add(null /*add at the end*/, [\n      [\"1/1/2017\", \"The Phone Company\", \"Communications\", \"120\"],\n      [\"1/2/2017\", \"Northwind Electric Cars\", \"Transportation\", \"142.33\"],\n      [\"1/5/2017\", \"Best For You Organics Company\", \"Groceries\", \"27.9\"],\n      [\"1/10/2017\", \"Coho Vineyard\", \"Restaurant\", \"33\"],\n      [\"1/11/2017\", \"Bellows College\", \"Education\", \"350.1\"],\n      [\"1/15/2017\", \"Trey Research\", \"Other\", \"135\"],\n      [\"1/15/2017\", \"Best For You Organics Company\", \"Groceries\", \"97.88\"],\n    ]);\n\n    // TODO3: Queue commands to format the table.\n    expensesTable.columns.getItemAt(3).getRange().numberFormat = [[\"\\u20AC#,##0.00\"]];\n    expensesTable.getRange().format.autofitColumns();\n    expensesTable.getRange().format.autofitRows();\n\n    await context.sync();\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n}\n"],"names":["createTable","Excel","run","context","currentWorksheet","workbook","worksheets","getActiveWorksheet","expensesTable","tables","add","name","getHeaderRowRange","values","rows","columns","getItemAt","getRange","numberFormat","format","autofitColumns","autofitRows","sync","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","Office","onReady","info","requirements","isSetSupported","document","getElementById","onclick","host","HostType","style","display"],"sourceRoot":""}